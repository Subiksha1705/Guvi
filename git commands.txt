
# Git Commands with Examples

## 1. Initialize a Repository
- **Usage:** Initialize a new Git repository.
- **Syntax:**
  ```bash
  git init
  ```
- **Example:**
  ```bash
  git init my_project
  ```
  *Creates a Git repository in the `my_project` folder.*

---

## 2. Clone a Repository
- **Usage:** Clone a remote repository to your local machine.
- **Syntax:**
  ```bash
  git clone <repository-url>
  ```
- **Example:**
  ```bash
  git clone https://github.com/user/repo.git
  ```
  *Downloads the repository from GitHub to your local directory.*

---

## 3. Check Repository Status
- **Usage:** View the current state of your working directory and staging area.
- **Syntax:**
  ```bash
  git status
  ```
- **Example:**
  ```bash
  git status
  ```
  *Shows which files are modified, staged, or untracked.*

---

## 4. Add Files to Staging
- **Usage:** Add specific or all files to the staging area before committing.
- **Syntax:**
  ```bash
  git add <file>
  git add .
  ```
- **Example:**
  ```bash
  git add index.html
  git add .
  ```
  *Adds the specified file or all files to the staging area.*

---

## 5. Commit Changes
- **Usage:** Commit staged changes with a descriptive message.
- **Syntax:**
  ```bash
  git commit -m "Commit message"
  ```
- **Example:**
  ```bash
  git commit -m "Added homepage layout"
  ```
  *Saves the changes with a message describing what was done.*

---

## 6. View Commit History
- **Usage:** View a detailed log of commits.
- **Syntax:**
  ```bash
  git log
  ```
- **Example:**
  ```bash
  git log
  ```
  *Displays commit history in detail.*

---

## 7. View Simplified Commit History
- **Usage:** View a simple one-line version of the commit log.
- **Syntax:**
  ```bash
  git log --oneline
  ```
- **Example:**
  ```bash
  git log --oneline
  ```
  *Shows a short summary of commits.*

---

## 8. Show Commit Details
- **Usage:** View detailed information about a specific commit.
- **Syntax:**
  ```bash
  git show <commit-hash>
  ```
- **Example:**
  ```bash
  git show abc1234
  ```
  *Displays changes and details from a particular commit.*

---

## 9. Create a New Branch
- **Usage:** Create a new branch from the current branch.
- **Syntax:**
  ```bash
  git branch <branch-name>
  ```
- **Example:**
  ```bash
  git branch feature-login
  ```
  *Creates a branch named `feature-login`.*

---

## 10. List All Branches
- **Usage:** View all branches in the repository.
- **Syntax:**
  ```bash
  git branch
  ```
- **Example:**
  ```bash
  git branch
  ```
  *Lists all branches with the current branch highlighted.*

---

## 11. Switch to a Branch
- **Usage:** Switch to a specified branch.
- **Syntax:**
  ```bash
  git checkout <branch-name>
  ```
- **Example:**
  ```bash
  git checkout feature-login
  ```
  *Switches to the branch named `feature-login`.*

---

## 12. Switch Branch (Alternative)
- **Usage:** Switch to a branch using a simpler command.
- **Syntax:**
  ```bash
  git switch <branch-name>
  ```
- **Example:**
  ```bash
  git switch feature-login
  ```

---

## 13. Merge Branches
- **Usage:** Merge changes from one branch into another.
- **Syntax:**
  ```bash
  git merge <branch-name>
  ```
- **Example:**
  ```bash
  git merge feature-login
  ```
  *Merges changes from `feature-login` to the current branch.*

---

## 14. Delete a Branch
- **Usage:** Delete a branch.
- **Syntax:**
  ```bash
  git branch -d <branch-name>
  ```
- **Example:**
  ```bash
  git branch -d feature-login
  ```

---

## 15. Stash Changes
- **Usage:** Temporarily save changes without committing.
- **Syntax:**
  ```bash
  git stash
  ```
- **Example:**
  ```bash
  git stash
  ```

---

## 16. Apply Stashed Changes
- **Usage:** Apply the most recent stash.
- **Syntax:**
  ```bash
  git stash apply
  ```
- **Example:**
  ```bash
  git stash apply
  ```

---

## 17. View Stashes
- **Usage:** List all stashed changes.
- **Syntax:**
  ```bash
  git stash list
  ```
- **Example:**
  ```bash
  git stash list
  ```

---

## 18. Revert a Commit
- **Usage:** Create a new commit that undoes a previous commit.
- **Syntax:**
  ```bash
  git revert <commit-hash>
  ```
- **Example:**
  ```bash
  git revert abc1234
  ```

---

## 19. Reset to a Previous Commit
- **Usage:** Reset to a specific commit, discarding changes.
- **Syntax:**
  ```bash
  git reset --hard <commit-hash>
  ```
- **Example:**
  ```bash
  git reset --hard abc1234
  ```

---

## 20. View Remote Repositories
- **Usage:** View remote repositories linked to your project.
- **Syntax:**
  ```bash
  git remote -v
  ```
- **Example:**
  ```bash
  git remote -v
  ```

---

# Git Commands to Push and Pull a Project

## Add a Remote Repository
```bash
git remote add origin <repository-url>
```

## Push Changes to Remote
```bash
git push -u origin <branch-name>
```

## Pull Latest Changes from Remote
```bash
git pull origin <branch-name>
```

## Fetch Changes Without Merging
```bash
git fetch origin
```

